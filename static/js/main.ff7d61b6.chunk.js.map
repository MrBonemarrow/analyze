{"version":3,"sources":["pages/About.tsx","components/Gallery/GalleryItem.tsx","pages/Gallery.tsx","redux/actionTypes.ts","components/Header/BackButton.tsx","pages/Header.tsx","components/Repo/CellMetaData.tsx","components/Repo/OverlayButton.tsx","components/Repo/Polygon.tsx","components/Repo/OverlayRenderingFunctions.tsx","models.ts","components/Repo/OverlayBar.tsx","components/Repo/PowerDiagram.tsx","pages/Repo.tsx","redux/reducer.ts","App.tsx","redux/store.ts","index.tsx"],"names":["About","GalleryItem","props","className","to","ORC","owner","repo","src","process","alt","Gallery","HOVER_CELL","SELECT_CELL","UPDATE_CELLS","API_ERROR","DIAGRAM_SIZE","NAVIGATE_BACK","TOGGLE_OVERLAY","BackButton","selectedCellHistory","useSelector","state","diagram","dispatch","useDispatch","active","length","data-tip","onClick","type","undefined","Header","location","useLocation","pathname","includes","CellMetaData","focused","id","label","substring","indexOf","Date","meta","created_timestamp","toLocaleTimeString","timeZone","Intl","DateTimeFormat","resolvedOptions","last_edited_ts","toLocaleDateString","lines_of_code","library","add","faArrowLeft","faThermometerHalf","faLanguage","faSkullCrossbones","OverlayButton","overlay","activeOverlay","isActive","tooltip","icon","fontawesomeIconName","Polygon","cell","points","l_circ","style","relativeTier","measureTextWidth","text","fontSize","context","font","getComputedStyle","document","body","fontFamily","measureText","width","isDir","n_c","rawLabel","split","slice","renderedLabel","maxWidth","createElement","getContext","i_max","i_min","next_i","Math","floor","computeMaxInscribedFontSize","hasLabel","name","onMouseOver","event","target","cellId","dataset","debounce","time","onMouseOut","data-label","x","y","textAnchor","alignmentBaseline","noOverlay","cells","baseCell","size","unorderedCells","filter","tier","concat","map","xs","i","ys","join","fillOpacity","strokeWidth","max","strokeOpacity","Overlays","NONE","overlayRenderingFunction","HEATMAP","commit_counts","commit_count","max_commits","min","percentageToColor","percentage","maxHue","minHue","hue","fill","DEAD_CODE","LANGUAGES","OverlayBar","PowerDiagram","Object","values","height","error","selected","firstUpdate","useRef","refDiv","refSVG","useEffect","element","current","clientWidth","clientHeight","fetchCells","console","log","axios","get","then","res","data","catch","message","reduce","val","scaledX","scaledY","minX","maxX","minY","maxY","duration","TweenMax","attr","viewBox","ref","margin","border","Repo","commit","defaultDiagramState","last_edited_name","last_edited_email","rootReducer","combineReducers","action","push","prevCell","pop","app","App","store","createStore","composeWithDevTools","applyMiddleware","createDebounce","exact","path","render","component","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ff7d61b6.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react'\n\nconst About: FunctionComponent = () => {\n  return (\n    <div>\n      <p>About</p>\n    </div>\n  )\n}\n\nexport default About\n","import 'css/Gallery.css'\nimport { OwnerRepoCommit } from 'models'\nimport React, { FunctionComponent } from 'react'\nimport { Link } from 'react-router-dom'\n\ninterface GalleryItemProps {\n  ORC: OwnerRepoCommit\n}\n\nconst GalleryItem: FunctionComponent<GalleryItemProps> = (props: GalleryItemProps) => {\n  return (\n    <Link className=\"GalleryItem\" to={`/repo/${props.ORC.owner}/${props.ORC.repo}`}>\n      <img\n        className=\"ThumbnailImage\"\n        src={`${process.env.PUBLIC_URL}/assets/thumbnails/${props.ORC.owner}-${props.ORC.repo}_thumbnail.png`}\n        alt=\"image\"\n      />\n      <p> {`${props.ORC.owner}/${props.ORC.repo}`} </p>\n    </Link>\n  )\n}\n\nexport default GalleryItem\n","import GalleryItem from 'components/Gallery/GalleryItem'\nimport { OwnerRepoCommit } from 'models'\nimport React, { FunctionComponent } from 'react'\n\nconst Gallery: FunctionComponent = () => {\n  return (\n    <div className={'Gallery'}>\n      <GalleryItem ORC={{ owner: 'pallets', repo: 'flask' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'facebook', repo: 'react' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'apache', repo: 'OpenNLP' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'pallets', repo: 'flask' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'facebook', repo: 'react' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'pallets', repo: 'flask' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'facebook', repo: 'react' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'apache', repo: 'OpenNLP' } as OwnerRepoCommit} />\n      <GalleryItem ORC={{ owner: 'PyGithub', repo: 'PyGithub' } as OwnerRepoCommit} />\n    </div>\n  )\n}\n\nexport default Gallery\n","import { Cell, Overlay } from 'models'\n\nconst HOVER_CELL = 'DIAGRAM_HOVER_CELL'\nconst SELECT_CELL = 'DIAGRAM_SELECT_CELL'\nconst UPDATE_CELLS = 'DIAGRAM_UPDATE_CELLS'\nconst API_ERROR = 'DIAGRAM_API_ERROR'\nconst DIAGRAM_SIZE = 'DIAGRAM_SIZE'\nconst NAVIGATE_BACK = 'NAVIGATE_BACK'\nconst TOGGLE_OVERLAY = 'TOGGLE_OVERLAY'\n\nexport { HOVER_CELL, SELECT_CELL, UPDATE_CELLS, API_ERROR, DIAGRAM_SIZE, NAVIGATE_BACK, TOGGLE_OVERLAY }\n\ninterface HoverCellAction {\n  type: typeof HOVER_CELL\n  cellId: string\n}\n\ninterface SelectCellAction {\n  type: typeof SELECT_CELL\n  cellId: string\n}\n\ninterface UpdateCellsAction {\n  type: typeof UPDATE_CELLS\n  cells: Array<Cell>\n}\n\ninterface DiagramSize {\n  type: typeof DIAGRAM_SIZE\n  width: number\n  height: number\n}\n\ninterface APIError {\n  type: typeof API_ERROR\n  error: string\n}\n\ninterface NavigateBackAction {\n  type: typeof NAVIGATE_BACK\n}\n\ninterface ToggleOverlayAction {\n  type: typeof TOGGLE_OVERLAY\n  overlay: Overlay\n}\n\nexport type DiagramActions =\n  | HoverCellAction\n  | SelectCellAction\n  | UpdateCellsAction\n  | APIError\n  | DiagramSize\n  | NavigateBackAction\n  | ToggleOverlayAction\n\ninterface DummyAction {\n  type: typeof API_ERROR\n}\nexport type AppActions = DummyAction\n\nexport type RootActions = AppActions | DiagramActions\n","import React, { FunctionComponent } from 'react'\nimport { FiArrowLeftCircle } from 'react-icons/fi'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ReactTooltip from 'react-tooltip'\nimport { NAVIGATE_BACK } from 'redux/actionTypes'\nimport { RootState } from 'redux/store'\n\nconst BackButton: FunctionComponent = () => {\n  const { selectedCellHistory } = useSelector((state: RootState) => ({\n    selectedCellHistory: state.diagram.selectedCellHistory,\n  }))\n  const dispatch = useDispatch()\n\n  const onClick = () => {\n    dispatch({\n      type: NAVIGATE_BACK,\n    })\n  }\n\n  const active = selectedCellHistory.length != 0\n  return (\n    <div>\n      <FiArrowLeftCircle\n        data-tip=\"Navigate back up the hierarchy\"\n        className={`BackButton ${active ? 'active' : 'inactive'}`}\n        onClick={active ? onClick : undefined}\n      />\n      <ReactTooltip className=\"ReactTooltip\" />\n    </div>\n  )\n}\n\nexport default BackButton\n","import BackButton from 'components/Header/BackButton'\nimport 'css/Header.css'\nimport React, { FunctionComponent } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\n\nconst Header: FunctionComponent = () => {\n  const location = useLocation()\n\n  return (\n    <div className={'Header'}>\n      {location.pathname.includes('repo') ? <BackButton /> : null}\n      <span className={'Navbar'}>\n        <Link to=\"/gallery\">Gallery</Link>\n        <Link to=\"/about\">About</Link>\n      </span>\n    </div>\n  )\n}\n\nexport default Header\n","import 'css/Repo.css'\nimport React, { FunctionComponent } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from 'redux/store'\n\nconst CellMetaData: FunctionComponent = () => {\n  const focused = useSelector((state: RootState) => state.diagram.focused)\n\n  return (\n    <div className={'CellMetaData'}>\n      <p id={'focusedLabel'}>{focused ? `${focused.label.substring(focused.label.indexOf('/'))}` : '/'}</p>\n      <p>{`Created: ${\n        focused\n          ? new Date(focused?.meta.created_timestamp * 1000).toLocaleTimeString('en-UK', {\n              timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n            })\n          : 'N/A'\n      }`}</p>\n      <p>{`Last edited: ${\n        focused\n          ? new Date(focused?.meta.last_edited_ts * 1000).toLocaleDateString('en-UK', {\n              timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n            })\n          : 'N/A'\n      }`}</p>\n      <p>{`Lines of code: ${focused ? focused.meta.lines_of_code : 'N/A'}`}</p>\n    </div>\n  )\n}\n\nexport default CellMetaData\n","import { IconProp, library } from '@fortawesome/fontawesome-svg-core'\nimport { faArrowLeft, faLanguage, faSkullCrossbones, faThermometerHalf } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Overlay } from 'models'\nimport React, { FunctionComponent } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ReactTooltip from 'react-tooltip'\nimport { TOGGLE_OVERLAY } from 'redux/actionTypes'\nimport { RootState } from 'redux/store'\n\nlibrary.add(faArrowLeft, faThermometerHalf, faLanguage, faSkullCrossbones)\n\ninterface OverlayButtonProps {\n  overlay: Overlay\n}\n\nconst OverlayButton: FunctionComponent<OverlayButtonProps> = (props: OverlayButtonProps) => {\n  const { overlay } = props\n  const { activeOverlay } = useSelector((state: RootState) => ({\n    activeOverlay: state.diagram.activeOverlay,\n  }))\n  const dispatch = useDispatch()\n\n  const onClick = () => {\n    dispatch({\n      type: TOGGLE_OVERLAY,\n      overlay: overlay,\n    })\n  }\n\n  const isActive = activeOverlay === overlay ? 'active' : 'inactive'\n\n  return (\n    <div data-tip={overlay.tooltip} className={`OverlayButton ${isActive}`} onClick={onClick}>\n      <FontAwesomeIcon icon={overlay.fontawesomeIconName as IconProp} className={isActive} />\n      <ReactTooltip className=\"ReactTooltip\" />\n    </div>\n  )\n}\n\nexport default OverlayButton\n","import { Cell, Overlay } from 'models'\nimport React, { CSSProperties, FunctionComponent } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { HOVER_CELL, SELECT_CELL } from 'redux/actionTypes'\n\ninterface PolygonProps {\n  cell: Cell\n  points: string\n  l_circ: number[]\n  style: CSSProperties\n  relativeTier: number\n  overlay: Overlay\n}\n\nconst Polygon: FunctionComponent<PolygonProps> = (props: PolygonProps) => {\n  const { cell, points, l_circ, style, relativeTier, overlay } = props\n\n  const dispatch = useDispatch()\n  const MIN_FONT_SIZE = 16\n  const MAX_FONT_SIZE = 72\n\n  const onMouseOver = (event: React.MouseEvent<SVGPolygonElement>) => {\n    const target = event.target as HTMLInputElement\n\n    dispatch({\n      type: HOVER_CELL,\n      cellId: target.dataset.label,\n      meta: {\n        debounce: {\n          time: 100,\n        },\n      },\n    })\n  }\n\n  const onMouseOut = () => {\n    dispatch({\n      type: HOVER_CELL,\n      cellId: undefined,\n      meta: {\n        debounce: {\n          time: 600,\n        },\n      },\n    })\n  }\n\n  const onClick = (event: React.MouseEvent<SVGPolygonElement>) => {\n    const target = event.target as HTMLInputElement\n\n    dispatch({ type: SELECT_CELL, cellId: target.dataset.label })\n  }\n\n  const measureTextWidth = (text: string, fontSize: number, context: CanvasRenderingContext2D) => {\n    context.font = fontSize + 'px ' + getComputedStyle(document.body).fontFamily\n    return context.measureText(text).width\n  }\n\n  const computeMaxInscribedFontSize = (text: string, maxWidth: number) => {\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n    if (!context) {\n      return 0\n    }\n\n    let i_max = MAX_FONT_SIZE\n    let i_min = 0\n    let next_i = Math.floor(i_max - i_min / 2)\n    while (i_max - i_min > 1) {\n      const computedWidth = measureTextWidth(text, next_i, context)\n      if (computedWidth > maxWidth) {\n        i_max = next_i\n      } else {\n        i_min = next_i\n      }\n      next_i = Math.floor((i_max - i_min) / 2) + i_min\n    }\n\n    return next_i\n  }\n\n  const isDir = cell.n_c > 0\n  const rawLabel = cell.label.split('/').slice(-1)[0]\n  const renderedLabel = isDir ? rawLabel + '/' : rawLabel\n  const fontSize = l_circ.length > 0 ? computeMaxInscribedFontSize(renderedLabel, 1.6 * l_circ[2]) : 0\n  const hasLabel = l_circ.length > 0 && fontSize >= MIN_FONT_SIZE && isDir\n\n  return (\n    <g\n      className={`Polygon ${isDir ? 'dirPolygon' : 'filePolygon'} ${hasLabel ? 'hasLabel' : 'hasNoLabel'} ${\n        relativeTier > 0 ? 'deeperTier' : relativeTier === 0 ? 'equalTier' : 'shallowerTier'\n      } relativeTier${relativeTier} ${overlay.name}\n      `}\n      onMouseOver={onMouseOver}\n      onMouseOut={onMouseOut}\n      onClick={onClick}\n    >\n      <polygon points={points} style={style} data-label={cell.label} />\n      {hasLabel ? (\n        <text x={l_circ[0]} y={l_circ[1]} fontSize={fontSize}>\n          <tspan textAnchor=\"middle\" alignmentBaseline=\"middle\">\n            {renderedLabel}\n          </tspan>\n        </text>\n      ) : (\n        ''\n      )}\n    </g>\n  )\n}\n\nexport default Polygon\n","import Polygon from 'components/Repo/Polygon'\nimport { Cell, Overlays } from 'models'\nimport React from 'react'\n\nconst noOverlay = (cells: Cell[], baseCell: Cell, size: number): JSX.Element[] => {\n  const unorderedCells = cells.filter((cell) => cell.tier <= baseCell.tier + 2)\n  // Scale and centre to fix whole SVG\n\n  const orderedCells = unorderedCells\n    .filter((cell) => cell.tier <= baseCell.tier)\n    .concat(\n      unorderedCells.filter((cell) => cell.tier > baseCell.tier + 1),\n      unorderedCells.filter((cell) => cell.tier === baseCell.tier + 1),\n    )\n\n  return orderedCells\n    .map((cell) => {\n      const points = cell.xs.map((x, i) => {\n        return [`${size * x},${size * cell.ys[i]}`]\n      })\n      let l_circ: number[] = []\n      if (cell.tier == baseCell.tier + 1) {\n        l_circ = [cell.l_circ[0] * size, cell.l_circ[1] * size, cell.l_circ[2] * size]\n      }\n      return { cell, points, l_circ }\n    })\n    .map(({ cell, points, l_circ }) => {\n      return (\n        <Polygon\n          key={cell.label}\n          cell={cell}\n          points={points.join(' ')}\n          l_circ={l_circ}\n          style={{\n            fillOpacity: cell.tier > baseCell.tier && cell.tier <= baseCell.tier + 2 ? 1 : 0,\n            strokeWidth: Math.max(1, 4 - cell.tier),\n            strokeOpacity: cell.tier > baseCell.tier + 1 ? 0.4 : 1,\n          }}\n          overlay={Overlays.NONE}\n          relativeTier={cell.tier - baseCell.tier} /*0: baseCell, negative: shallower, positive: deeper*/\n        />\n      )\n    })\n}\n\nconst heatmapOverlay = (cells: Cell[], baseCell: Cell, size: number): JSX.Element[] => {\n  const commit_counts = cells.map((cell) => cell.meta.commit_count)\n  const commit_ceiling = 30\n  const max_commits = Math.min(Math.max(...commit_counts), commit_ceiling)\n\n  function percentageToColor(percentage: number, maxHue = 108, minHue = 0) {\n    const hue = percentage * (maxHue - minHue) + minHue\n    return `hsl(${hue}, 40%, 50%)`\n  }\n\n  const orderedCells = cells\n    .filter((cell) => cell.tier <= baseCell.tier)\n    .concat(\n      cells.filter((cell) => cell.tier > baseCell.tier + 1),\n      cells.filter((cell) => cell.tier === baseCell.tier + 1),\n    )\n\n  return orderedCells\n    .map((cell) => {\n      const points = cell.xs.map((x, i) => {\n        return [`${size * x},${size * cell.ys[i]}`]\n      })\n      let l_circ: number[] = []\n      if (cell.tier == baseCell.tier + 1) {\n        l_circ = [cell.l_circ[0] * size, cell.l_circ[1] * size, cell.l_circ[2] * size]\n      }\n      return { cell, points, l_circ }\n    })\n    .map(({ cell, points, l_circ }) => {\n      return (\n        <Polygon\n          key={cell.label}\n          cell={cell}\n          points={points.join(' ')}\n          l_circ={l_circ}\n          style={{\n            fillOpacity: 1.0,\n            fill: percentageToColor(1 - Math.min(cell.meta.commit_count, commit_ceiling) / max_commits),\n            strokeWidth: Math.max(1, 4 - cell.tier),\n          }}\n          overlay={Overlays.HEATMAP}\n          relativeTier={cell.tier - baseCell.tier} /*0: baseCell, negative: shallower, positive: deeper*/\n        />\n      )\n    })\n}\n\nexport { noOverlay, heatmapOverlay }\n","/**\n * All shared model types\n */\nimport { heatmapOverlay, noOverlay } from 'components/Repo/OverlayRenderingFunctions'\n\ninterface CellMetaData {\n  lines_of_code: number\n  last_edited_ts: number\n  last_edited_name: string\n  last_edited_email: string\n  created_timestamp: number\n  commit_count: number\n}\n\ninterface Cell {\n  label: string\n  tier: number\n  xs: number[]\n  ys: number[]\n  meta: CellMetaData\n  l_circ: number[]\n  n_c: number\n}\n\ntype OverlayRenderingFunction = (cells: Cell[], baseCell: Cell, size: number) => JSX.Element[]\n\ninterface Overlay {\n  name: string\n  tooltip: string\n  fontawesomeIconName: string\n  overlayRenderingFunction: OverlayRenderingFunction\n}\n\nexport const Overlays = {\n  NONE: {\n    name: 'noOverlay',\n    tooltip: '',\n    fontawesomeIconName: '',\n    overlayRenderingFunction: noOverlay,\n  },\n  HEATMAP: {\n    name: 'heatmapOverlay',\n    tooltip: 'Shows number of commits across repo',\n    fontawesomeIconName: 'thermometer-half',\n    overlayRenderingFunction: heatmapOverlay,\n  },\n  DEAD_CODE: {\n    name: 'deadCodeOverlay',\n    tooltip: 'Highlights code that has not been updated recently',\n    fontawesomeIconName: 'skull-crossbones',\n    overlayRenderingFunction: noOverlay,\n  },\n  LANGUAGES: {\n    name: 'languagesOverlay',\n    tooltip: 'Shows language of files in repo',\n    fontawesomeIconName: 'language',\n    overlayRenderingFunction: noOverlay,\n  },\n} as const\n\ninterface OwnerRepoCommit {\n  owner: string\n  repo: string\n  commit?: string\n}\n\nexport type { Cell, OwnerRepoCommit, Overlay }\n","import OverlayButton from 'components/Repo/OverlayButton'\nimport { Overlays } from 'models'\nimport React, { FunctionComponent } from 'react'\n\nconst OverlayBar: FunctionComponent = () => {\n  return (\n    <div className={'OverlayBar'}>\n      <OverlayButton overlay={Overlays.HEATMAP} />\n      <OverlayButton overlay={Overlays.LANGUAGES} />\n      <OverlayButton overlay={Overlays.DEAD_CODE} />\n    </div>\n  )\n}\n\nexport default OverlayBar\n","import axios from 'axios'\nimport 'css/Repo.css'\nimport { TweenMax } from 'gsap'\nimport { OwnerRepoCommit } from 'models'\nimport React, { FunctionComponent, useEffect, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { API_ERROR, DIAGRAM_SIZE, UPDATE_CELLS } from 'redux/actionTypes'\nimport { RootState } from 'redux/store'\n\ninterface AppProps {\n  ORC: OwnerRepoCommit\n}\n\nconst PowerDiagram: FunctionComponent<AppProps> = (props: AppProps) => {\n  const { baseCell, cells, width, height, error, activeOverlay } = useSelector((state: RootState) => ({\n    cells: Object.values(state.diagram.cells),\n    width: state.diagram.width,\n    height: state.diagram.height,\n    error: state.diagram.error,\n    baseCell: state.diagram.selected,\n    activeOverlay: state.diagram.activeOverlay,\n  }))\n  const dispatch = useDispatch()\n\n  // Store boolean in HTML so we know when the component is first rendered\n  const firstUpdate = useRef(true)\n\n  // Capture the size of container div for diagram rendering and svg for animation\n  const refDiv = useRef<HTMLDivElement>(null)\n  const refSVG = useRef<SVGSVGElement>(null)\n\n  // On initial render capture size of screen and fetch cells, and reset the state on component removal\n  useEffect(() => {\n    const element = refDiv?.current\n    if (element) {\n      dispatch({ type: DIAGRAM_SIZE, width: element.clientWidth, height: element.clientHeight })\n    }\n    fetchCells()\n\n    return function onUnmount() {\n      dispatch({ type: UPDATE_CELLS, cells: [] })\n    }\n  }, [])\n\n  const fetchCells = () => {\n    console.log(`Fetching cells for ${props.ORC.owner}/${props.ORC.repo}`)\n    axios\n      .get(`http://localhost:3000/repos/${props.ORC.owner}/${props.ORC.repo}.json`)\n      .then((res) => {\n        const cells = res.data\n\n        // Ensure they are sorted by tier for rendering\n        dispatch({ type: UPDATE_CELLS, cells })\n      })\n      .catch((error: Error) => {\n        dispatch({ type: API_ERROR, error: error.message })\n      })\n  }\n\n  // Use min of width and height to maintain aspect ratio\n  const size = Math.min(width, height)\n\n  // Get bounds of base cell to zoom\n  const [minX, maxX, minY, maxY] = baseCell.xs.reduce(\n    (val, x, i) => {\n      const scaledX = x * size\n      const scaledY = baseCell.ys[i] * size\n      return [\n        Math.min(val[0], scaledX),\n        Math.max(val[1], scaledX),\n        Math.min(val[2], scaledY),\n        Math.max(val[3], scaledY),\n      ]\n    },\n    [size, 0, size, 0],\n  )\n\n  // Apply animation on zoom after render has completed so that SVG can be dynamically generated\n  // Only apply if baseCell has changed (or size for initial render)\n  useEffect(() => {\n    if (refSVG.current && cells.length > 0) {\n      // Only animate on zoom not first load with base cell\n      const duration = firstUpdate.current ? 0 : 1\n\n      TweenMax.to(refSVG.current, duration, {\n        attr: {\n          viewBox: `${minX} ${minY} ${maxX - minX} ${maxY - minY}`,\n        },\n      })\n\n      firstUpdate.current = false\n    }\n  }, [size, baseCell.label, cells.length])\n\n  if (error) {\n    return <div>Data not found: {error}</div>\n  }\n\n  return (\n    <div className=\"PowerDiagram\" ref={refDiv}>\n      <svg ref={refSVG} style={{ margin: 'auto', border: '0px', width, height }}>\n        {activeOverlay.overlayRenderingFunction(cells, baseCell, size)}\n      </svg>\n    </div>\n  )\n}\n\nexport default PowerDiagram\n","import CellMetaData from 'components/Repo/CellMetaData'\nimport OverlayBar from 'components/Repo/OverlayBar'\nimport PowerDiagram from 'components/Repo/PowerDiagram'\nimport 'css/Repo.css'\nimport { OwnerRepoCommit } from 'models'\nimport React, { FunctionComponent } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\n\nconst Repo: FunctionComponent<RouteComponentProps> = () => {\n  const ORC = {\n    owner: location.pathname.split('/')[2],\n    repo: location.pathname.split('/')[3],\n    commit: 'master',\n  } as OwnerRepoCommit\n\n  return (\n    <div className={'Repo'}>\n      <OverlayBar />\n      <PowerDiagram ORC={ORC} />\n      <CellMetaData />\n    </div>\n  )\n}\n\nexport default Repo\n","import { Cell, Overlays } from 'models'\nimport { combineReducers } from 'redux'\nimport {\n  API_ERROR,\n  AppActions,\n  DiagramActions,\n  DIAGRAM_SIZE,\n  HOVER_CELL,\n  NAVIGATE_BACK,\n  SELECT_CELL,\n  TOGGLE_OVERLAY,\n  UPDATE_CELLS,\n} from 'redux/actionTypes'\nimport { AppState, DiagramState, RootState } from 'redux/store'\n\nconst defaultDiagramState: DiagramState = {\n  cells: {},\n  selectedCellHistory: [],\n  width: 0,\n  height: 0,\n  selected: {\n    label: 'base',\n    tier: 0,\n    xs: [-0.1, -0.1, 1.1, 1.1],\n    ys: [-0.1, 1.1, -0.1, 1.1],\n    meta: {\n      lines_of_code: 0,\n      last_edited_ts: 0,\n      last_edited_name: 'None',\n      last_edited_email: 'None',\n      created_timestamp: 0,\n      commit_count: 0,\n    },\n    l_circ: [0.5, 0.49999999999999994, 0.32483442836611853],\n    n_c: 0,\n  },\n  activeOverlay: Overlays.NONE,\n}\n\nconst maxHistoryLength = 30\n\nfunction diagram(state: DiagramState = defaultDiagramState, action: DiagramActions): DiagramState {\n  switch (action.type) {\n    case TOGGLE_OVERLAY:\n      return {\n        ...state,\n        activeOverlay: state.activeOverlay !== action.overlay ? action.overlay : Overlays.NONE,\n      }\n    case HOVER_CELL:\n      return {\n        ...state,\n        focused: state.cells[action.cellId],\n      }\n    case SELECT_CELL:\n      const cell = state.cells[action.cellId]\n      state.selectedCellHistory.push(state.selected)\n      return {\n        ...state,\n        selected: cell,\n        focused: cell,\n        selectedCellHistory: state.selectedCellHistory.slice(-maxHistoryLength),\n      }\n    case NAVIGATE_BACK:\n      const prevCell = state.selectedCellHistory?.pop()\n      let selected\n      if (prevCell) {\n        selected = prevCell\n      } else {\n        selected = state.selected\n      }\n\n      return {\n        ...state,\n        selected: selected,\n        focused: selected,\n        selectedCellHistory: state.selectedCellHistory,\n      }\n    case UPDATE_CELLS:\n      // Refresh the state to remove selected and zoom info when updating cell data\n      return {\n        ...defaultDiagramState,\n        cells: action.cells.reduce((map, cell) => {\n          map[cell.label] = cell\n          return map\n        }, {} as { [key: string]: Cell }),\n        height: state.height,\n        width: state.width,\n      }\n    case DIAGRAM_SIZE:\n      return {\n        ...state,\n        width: action.width,\n        height: action.height,\n      }\n    case API_ERROR:\n      return {\n        ...state,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nfunction app(state: AppState = {}, action: AppActions): AppState {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n\nexport const rootReducer = combineReducers<RootState>({\n  diagram,\n  app,\n})\n","import 'css/App.css'\nimport About from 'pages/About'\nimport Gallery from 'pages/Gallery'\nimport Header from 'pages/Header'\nimport Repo from 'pages/Repo'\nimport React, { FunctionComponent } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { createAppStore } from 'redux/store'\n\nconst App: FunctionComponent = () => {\n  return (\n    <Provider store={createAppStore()}>\n      <div className={'App'}>\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" render={() => <Redirect to=\"/gallery\" />} />\n            <Route exact path=\"/gallery\" component={Gallery} />\n            <Route exact path=\"/about\" component={About} />\n            <Route path=\"/repo\" component={Repo} />\n          </Switch>\n        </Router>\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","import { Cell, Overlay } from 'models'\nimport { applyMiddleware, createStore, Store } from 'redux'\nimport createDebounce from 'redux-debounced'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { RootActions } from 'redux/actionTypes'\nimport { rootReducer } from 'redux/reducer'\n\ninterface DiagramState {\n  cells: { [key: string]: Cell }\n  selectedCellHistory: Cell[]\n  selected: Cell\n  focused?: Cell\n  width: number\n  height: number\n  error?: string\n  activeOverlay: Overlay\n}\n\nclass AppState {}\n\ninterface RootState {\n  diagram: DiagramState\n  app: AppState\n}\n\nexport function createAppStore(): Store<RootState, RootActions> {\n  return createStore(rootReducer, undefined, composeWithDevTools(applyMiddleware(createDebounce())))\n}\n\nexport type { RootState, DiagramState, AppState }\n","import App from 'App'\nimport 'index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}